!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/b953728/
A	AFM_plot.py	/^A = 1.0        # Amplitud of the oscillation of the experimental cantiliever (in Ang)$/;"	v
addCurveToGridPoint	AFM_plot.py	/^def addCurveToGridPoint(gp, h, curve):$/;"	f
addForcesToGridPoint	AFM_plot.py	/^def addForcesToGridPoint(gp, h, curve):$/;"	f
add_labels	AFM_plot.py	/^add_labels = False$/;"	v
afm_image	AFM_plot.py	/^afm_image = []$/;"	v
afmforces	AFM_plot.py	/^afmforces = {1: [], # Object containing (x,y) grid points, [Z_i] and the force curve at each gri/;"	v
afmimage	AFM_plot.py	/^afmimage = {1: [], # Object containing (x,y) grid points, [Z_i] and the [ delta_w ] points $/;"	v
atoi	AFM_plot.py	/^def atoi(text):$/;"	f
atom_surf	AFM_plot.py	/^atom_surf = get_atom_index ("surface")$/;"	v
atom_tip	AFM_plot.py	/^atom_tip  = get_atom_index ("tip")$/;"	v
autosave	AFM_plot.py	/^autosave = True$/;"	v
ax1	AFM_plot.py	/^    ax1  = fig.add_subplot(221)$/;"	v
ax1	AFM_plot.py	/^ax1  = fig.add_subplot(221)$/;"	v
ax2	AFM_plot.py	/^    ax2  = fig.add_subplot(223)$/;"	v
ax2	AFM_plot.py	/^ax2  = fig.add_subplot(122)$/;"	v
ax3	AFM_plot.py	/^    ax3  = fig.add_subplot(224)$/;"	v
ax3	AFM_plot.py	/^ax3  = fig.add_subplot(223)$/;"	v
calc_force	AFM_plot.py	/^def calc_force (distances, energies, method = "direct", pol_rank = 12):$/;"	f
calculate_distance	AFM_plot.py	/^def calculate_distance (coordinates, at_1, at_2 ):$/;"	f
cmd	AFM_plot.py	/^            cmd = "grep 'energy  w' " + outcar +  " | tail -n 1 | awk '{print $7}'"$/;"	v
color	AFM_plot.py	/^color = {$/;"	v
constraints	AFM_plot.py	/^            coordinates, constraints = read_poscar(poscar)$/;"	v
coordinates	AFM_plot.py	/^            coordinates, constraints = read_poscar(poscar)$/;"	v
create_AFM_image	AFM_plot.py	/^def create_AFM_image():$/;"	f
data	AFM_plot.py	/^        data=np.genfromtxt(outdatfile, dtype=None, names=True)$/;"	v
delta_w	AFM_plot.py	/^    delta_w = []$/;"	v
dir_list	AFM_plot.py	/^dir_list= [d for d in os.listdir('.') if re.match(r'grid_point_[0-9]+', d)]$/;"	v
dist_interval	AFM_plot.py	/^    dist_interval = []$/;"	v
distance	AFM_plot.py	/^            distance = calculate_distance(coordinates, atom_tip, atom_surf)$/;"	v
distances	AFM_plot.py	/^        distances = data['Distance']$/;"	v
distances	AFM_plot.py	/^        distances = distances[::-1]$/;"	v
distances	AFM_plot.py	/^    distances = []$/;"	v
e_file	AFM_plot.py	/^        e_file=open(outdatfile,'w')$/;"	v
e_fit_spl	AFM_plot.py	/^    e_fit_spl = None$/;"	v
ener_interval	AFM_plot.py	/^    ener_interval = []$/;"	v
energies	AFM_plot.py	/^        energies  = data['Energy']$/;"	v
energies	AFM_plot.py	/^        energies = energies[::-1]$/;"	v
energies	AFM_plot.py	/^    energies = []$/;"	v
energy	AFM_plot.py	/^            energy=subprocess.check_output(cmd,shell=True)$/;"	v
error_critical	AFM_plot.py	/^def error_critical (msg = "Unknown critical error"):$/;"	f
f_interp	AFM_plot.py	/^    f_interp = None$/;"	v
fig	AFM_plot.py	/^    fig = plt.figure()$/;"	v
fig	AFM_plot.py	/^fig = plt.figure()$/;"	v
fig1	AFM_plot.py	/^    fig1 = plt.gcf()$/;"	v
fig2	AFM_plot.py	/^fig2 = plt.gcf()$/;"	v
force_method	AFM_plot.py	/^    force_method="spline"$/;"	v
force_spl	AFM_plot.py	/^    force_spl = None$/;"	v
get_Z_at_delta_w	AFM_plot.py	/^def get_Z_at_delta_w (omega,h, curve):$/;"	f
get_atom_index	AFM_plot.py	/^def get_atom_index (kind):$/;"	f
get_grid_point	AFM_plot.py	/^def get_grid_point ():$/;"	f
grid	AFM_plot.py	/^grid = {1: (0.00000, 0.00000),$/;"	v
grid_point	AFM_plot.py	/^    grid_point = get_grid_point()$/;"	v
h	AFM_plot.py	/^    h = []  # h ==>  z +- A : range [min(z)+A , max(z)-A]$/;"	v
idx_d	AFM_plot.py	/^            idx_d=idx_d+1$/;"	v
idx_d	AFM_plot.py	/^        idx_d=0$/;"	v
idx_en	AFM_plot.py	/^            idx_en=idx_en+1$/;"	v
idx_en	AFM_plot.py	/^        idx_en=0$/;"	v
if_save	AFM_plot.py	/^if_save=None$/;"	v
imageAtW	AFM_plot.py	/^imageAtW = {1: [], # Object containing the  (x,y) grid points and the Z value at a given delta W$/;"	v
infile	AFM_plot.py	/^    infile = sys.argv[1]$/;"	v
int_steps	AFM_plot.py	/^    int_steps = 1001       # Integration steps$/;"	v
integrate_forces	AFM_plot.py	/^def integrate_forces():$/;"	f
k	AFM_plot.py	/^k = 1800*0.0624      # Spring constant (eV\/ang**2)$/;"	v
label_interval	AFM_plot.py	/^label_interval = 5$/;"	v
max_ener	AFM_plot.py	/^    max_ener = max(energies)$/;"	v
natural_keys	AFM_plot.py	/^def natural_keys(text):$/;"	f
np	AFM_plot.py	/^import numpy as np$/;"	I
nxgp	AFM_plot.py	/^nxgp = 2             # Number of original X Grid points$/;"	v
nygp	AFM_plot.py	/^nygp = 5             # Number of original Y Grid points$/;"	v
of_save	AFM_plot.py	/^    of_save = open(prefix+"_autosave.wip", 'w')$/;"	v
omega_exp	AFM_plot.py	/^omega_exp = -5$/;"	v
on_change_splsmooth	AFM_plot.py	/^    def on_change_splsmooth (val):$/;"	f
on_change_w	AFM_plot.py	/^def on_change_w (val):$/;"	f
on_change_z_max	AFM_plot.py	/^    def on_change_z_max (val):$/;"	f
on_change_z_min	AFM_plot.py	/^    def on_change_z_min (val):$/;"	f
out_format	AFM_plot.py	/^    out_format='svg'$/;"	v
outcar_files	AFM_plot.py	/^        outcar_files = [f for f in os.listdir('.') if re.match(r'OUTCAR.[0-9]+', f)]$/;"	v
outcar_files	AFM_plot.py	/^        outcar_files = data['Filename']$/;"	v
outcar_files	AFM_plot.py	/^        outcar_files=outcar_files[::-1]$/;"	v
outcar_interval	AFM_plot.py	/^    outcar_interval = []$/;"	v
outdatfile	AFM_plot.py	/^outdatfile = 'Evsz.dat'$/;"	v
overlap_surface	AFM_plot.py	/^def overlap_surface ():$/;"	f
overlapsurface	AFM_plot.py	/^overlapsurface = True$/;"	v
phi	AFM_plot.py	/^    phi = np.linspace(0,2*np.pi,int_steps) # Angle$/;"	v
plot_AFM_image	AFM_plot.py	/^def plot_AFM_image ():$/;"	f
plot_name	AFM_plot.py	/^    plot_name = prefix+"_allgraphs_"+str(grid_point)+"." + out_format$/;"	v
plot_name	AFM_plot.py	/^plot_name = prefix+"_AFMImage"+".svg"$/;"	v
plot_outcar_labels	AFM_plot.py	/^def plot_outcar_labels():$/;"	f
plot_w_and_F_curves	AFM_plot.py	/^def plot_w_and_F_curves ():$/;"	f
plt	AFM_plot.py	/^import matplotlib.pyplot as plt$/;"	I
poscar_files	AFM_plot.py	/^            poscar_files=poscar_files[::-1]$/;"	v
poscar_files	AFM_plot.py	/^        poscar_files = [f for f in os.listdir('.') if re.match(r'POSCAR.[0-9]+', f)]$/;"	v
prefix	AFM_plot.py	/^prefix = "wip"$/;"	v
read_autosave	AFM_plot.py	/^def read_autosave(ifile, grid_point):$/;"	f
read_input	AFM_plot.py	/^def read_input(filename='inp.afm'):$/;"	f
read_outcar	AFM_plot.py	/^def read_outcar(filename = 'OUTCAR'):$/;"	f
read_poscar	AFM_plot.py	/^def read_poscar (poscar):$/;"	f
replot_graphs	AFM_plot.py	/^def replot_graphs():$/;"	f
save_afmimage	AFM_plot.py	/^save_afmimage = True$/;"	v
save_graphs	AFM_plot.py	/^save_graphs = True$/;"	v
set_interval	AFM_plot.py	/^def set_interval ():$/;"	f
show_afmimage	AFM_plot.py	/^show_afmimage = True$/;"	v
show_graphs	AFM_plot.py	/^show_graphs = True$/;"	v
slider_smooth	AFM_plot.py	/^    slider_smooth = Slider (slider_z_ax3, "Smooth", 0.0,0.0001, valinit=spl_smoothing, color='#A/;"	v
slider_w	AFM_plot.py	/^slider_w = Slider (slider_z_ax1, r"$\\Delta \\omega$", -100, -1, valinit=omega_exp, color='#AAAA/;"	v
slider_z_ax1	AFM_plot.py	/^    slider_z_ax1 = plt.axes([0.50,0.90,0.4, 0.02])$/;"	v
slider_z_ax1	AFM_plot.py	/^slider_z_ax1 = plt.axes([0.60,0.90,0.3, 0.02])$/;"	v
slider_z_ax2	AFM_plot.py	/^    slider_z_ax2 = plt.axes([0.50,0.85,0.4, 0.02])$/;"	v
slider_z_ax3	AFM_plot.py	/^    slider_z_ax3 = plt.axes([0.50,0.80,0.4, 0.02])$/;"	v
slider_zmax	AFM_plot.py	/^    slider_zmax = Slider (slider_z_ax2, "Z max", distances[4],distances[-1]+1, valinit=z_max, co/;"	v
slider_zmin	AFM_plot.py	/^    slider_zmin = Slider (slider_z_ax1, "Z min", distances[0],distances[-4], valinit=z_min, colo/;"	v
spl_smooth_init	AFM_plot.py	/^spl_smooth_init = spl_smoothing$/;"	v
spl_smoothing	AFM_plot.py	/^    spl_smoothing = spl_smooth_init$/;"	v
spl_smoothing	AFM_plot.py	/^spl_smoothing = 0.0005$/;"	v
string_to_bool	AFM_plot.py	/^def string_to_bool (string):$/;"	f
sum_forces	AFM_plot.py	/^def sum_forces (outcar, constraints):$/;"	f
tip_name	AFM_plot.py	/^tip_name = "AFM tip"$/;"	v
title	AFM_plot.py	/^    title=tip_name + "Grid point: "+ str(grid_point)$/;"	v
transform_coordiantes	AFM_plot.py	/^def transform_coordiantes (cell, coordinates, acell = 1.0):$/;"	f
using_dat_file	AFM_plot.py	/^        using_dat_file=True$/;"	v
using_dat_file	AFM_plot.py	/^using_dat_file = False$/;"	v
vertical_force	AFM_plot.py	/^            vertical_force = sum_forces (outcar_files[idx_d-1], constraints)$/;"	v
vertical_forces	AFM_plot.py	/^    vertical_forces = []$/;"	v
w	AFM_plot.py	/^    w = []  # w ==> (w_exp\/w_0)**2$/;"	v
w_0	AFM_plot.py	/^w_0 = 25000   # Natural resonance frequency of the cantilever  Times 2pi (in Hz)$/;"	v
write_autosave	AFM_plot.py	/^def write_autosave(ofile, grid_point):$/;"	f
write_geom_and_forces	AFM_plot.py	/^def write_geom_and_forces (natoms,atoms,forces):$/;"	f
x_interval	AFM_plot.py	/^x_interval = 2.02290 # Distance betwwen x grid points$/;"	v
xrep	AFM_plot.py	/^xrep = 6             # Number of repetition of X Grid points$/;"	v
y_interval	AFM_plot.py	/^y_interval = 1.12780 # Distance betwwen x grid points$/;"	v
yrep	AFM_plot.py	/^yrep = 3             # Number of repetition of Y Grid points$/;"	v
z_max	AFM_plot.py	/^    z_max = z_max_init$/;"	v
z_max	AFM_plot.py	/^z_max = 100.0$/;"	v
z_max_init	AFM_plot.py	/^z_max_init = z_max$/;"	v
z_min	AFM_plot.py	/^    z_min = z_min_init$/;"	v
z_min	AFM_plot.py	/^z_min = 10.0$/;"	v
z_min_init	AFM_plot.py	/^z_min_init = z_min$/;"	v
